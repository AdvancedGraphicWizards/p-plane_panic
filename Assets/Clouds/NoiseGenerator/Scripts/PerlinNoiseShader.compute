#pragma kernel CSMain

RWStructuredBuffer<float> Result;
uint Size;

uint Index(uint x, uint y, uint z) {
    return x % Size + y * Size + z * Size * Size;
}

float3 Fade(float3 t) {
    // Fade function as defined by Ken Perlin
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float Lerp(float a, float b, float t) {
    return a + t * (b - a);
}

float Grad(int hash, float x, float y, float z) {
    // Gradient function to calculate dot product between hash vector and (x, y, z)
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : (h == 12 || h == 14 ? x : z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

int Permute(int x) {
    return x % 256; // Simple permutation function
}

float PerlinNoise(float3 p) {
    // Permutation table
    int perm[256] = {
        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
        8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
        88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,
        229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,
        132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,
        124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,
        213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,
        224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,
        235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,
        236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
    };
    
    // Grid cell coordinates
    int xi = Permute((int)floor(p.x));
    int yi = Permute((int)floor(p.y));
    int zi = Permute((int)floor(p.z));

    // Local coordinates in grid cell
    float3 f = frac(p);

    // Compute fade curves for f
    float3 u = Fade(f);

    // Hash coordinates of the 8 cube corners
    int aaa = perm[perm[perm[xi] + yi] + zi];
    int aba = perm[perm[perm[xi] + yi + 1] + zi];
    int aab = perm[perm[perm[xi] + yi] + zi + 1];
    int abb = perm[perm[perm[xi] + yi + 1] + zi + 1];
    int baa = perm[perm[perm[xi + 1] + yi] + zi];
    int bba = perm[perm[perm[xi + 1] + yi + 1] + zi];
    int bab = perm[perm[perm[xi + 1] + yi] + zi + 1];
    int bbb = perm[perm[perm[xi + 1] + yi + 1] + zi + 1];

    // Add blended results from 8 corners of the cube
    float res = Lerp(
        Lerp(
            Lerp(Grad(aaa, f.x, f.y, f.z), Grad(baa, f.x - 1.0, f.y, f.z), u.x),
            Lerp(Grad(aba, f.x, f.y - 1.0, f.z), Grad(bba, f.x - 1.0, f.y - 1.0, f.z), u.x), u.y),
        Lerp(
            Lerp(Grad(aab, f.x, f.y, f.z - 1.0), Grad(bab, f.x - 1.0, f.y, f.z - 1.0), u.x),
            Lerp(Grad(abb, f.x, f.y - 1.0, f.z - 1.0), Grad(bbb, f.x - 1.0, f.y - 1.0, f.z - 1.0), u.x), u.y),
        u.z);
    
    // Normalize the result to range [0, 1]
    return (res + 1.0) * 0.5;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Normalized coordinates for tiling noise
    float3 p = float3(id.x, id.y, id.z) / Size * 20.0; // Repeat every 8 units in each axis
    
    // Compute Perlin noise value
    float noiseValue = PerlinNoise(p);
    
    // Write noise value to the result buffer
    Result[Index(id.x, id.y, id.z)] = noiseValue;
}
